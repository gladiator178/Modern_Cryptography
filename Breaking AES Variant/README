The given encryption method was:

        Consider a block of size 8 bytes as 8 x 1 vector over F_{128} --
	constructed using the degree 7 irreducible polynomial x^7 + x + 1
	over F_2. Define two transformations: first a linear transformation 
	given by invertible 8 x 8 key matrix A with elements from F_{128} and 
	second an exponentiation given by 8 x 1 vector E whose elements are 
	numbers between 1 and 126. E is applied on a block by taking the ith 
	element of the block and raising it to the power given by ith element in E.

	Apply these transformations in the sequence EAEAE on the input block
	to obtain the output block. Both E and A are part of the key.

	You can see the coded password by simply whispering 'password' near 
	the screen..."

The coded password reads:
msgjhgksjhilhofqjsjhikijmofkkrlh

We first observed the output to find out that all the outputs had alphabets between f-u, i.e., 16 letters. The input in this particular system is made up of only 16 letters because each letter is mapped to a number between 0 and 15, and only four bits are used to represent each letter. The input consists of 8 bytes, but since the field being used is GF(128), the values that can be represented ranging from 'ff' to 'mu'. Also, we observed outputs for every input from ff to mu and everyone mapped to a different output.

The output from inputs of the forms "pf" or "mf" and "pf" or "p" was the same as that from inputs of "g" or "h," respectively. This demonstrates that padding is being done with the letter "f."

So, ff maps to 00 and so on till mu which maps to 127 or 7f in hexadecimal and f is used for padding.
We had yet another observation:
fghijkllkjhgfhgj     ->     foisihflkumoifju
fghijkllkjhgfhgk    ->     foisihflkumoifjo
fghijkllkkhgfhgj    ->     foisihfljljilphl 
We had our inputs and outputs stored in a file and we figured out that if we changed the ith pair byte of input, all the outputs after this ith pair started changing.

So, we concluded that our matrix is a lower triangular matrix.
The linear transformation matrix used to encrypt the plaintext vector is lower triangular. This means that the matrix has zeros above the diagonal and non-zero entries on and below the diagonal.

To verify that the matrix is lower triangular, change only the ith element of the plaintext vector and observe the corresponding change in the ciphertext vector. The observation is that only the last (8-i) elements of the ciphertext vector changed, indicating that the encryption of the ith element of the plaintext vector only depends on the first i-1 elements.
Let p be the value of input plain text, such that it is non-zero.
Let aij  -> element at ith row and jth column in the matrix A
ei   -> element at ith index in the vector E
So, the output block is: (ai,i(pei*ai,i)ei)ei

The input format only allows for one block to be non-zero per input, so it is possible to iterate over all possible values of the diagonal elements and exponents. For each pair of plaintext ciphertext, the encryption and decryption operations (using the given values of ei and ai,i) were applied to all possible values of ei and ai,i ,and the resulting output was compared with the given ciphertext.

Using this brute force approach, we recorded our findings for every pair of (ai,i) and (ei):

Block Number having non-zero input value -> (ai,i) -> (ei)
0 -> [84, 87, 7] -> [23, 48, 56]
1 -> [127, 9, 70] -> [59, 90, 105]
2 -> [108, 43, 86] -> [29, 43, 55]
3 -> [30, 24, 12] -> [24, 28, 75]
4 -> [103, 8, 112] -> [2, 38, 87]
5 -> [17, 110, 11] -> [29, 43, 55]
6 -> [27, 66, 70] -> [22, 37, 68]
7 -> [62, 38, 21] -> [24, 28, 75]

Now, we use more ciphertext and plaintext pairs to eliminate values in the above table.
We utilise "aj,j" "ai,j" and "ai,i" to find ai,j.
By looking for ai+1,i, ai+2,i, ai+3,i and so on in the non-diagonal, we gradually remove the superfluous elements from the table. 

So, we found out our final table as:


Block number having non-zero input value -> (ai,i) -> (ei)
0 -> [84] -> [23]
1 -> [70] -> [105]
2 -> [43] -> [43]
3 -> [12] -> [75]
4 -> [112] -> [87]
5 -> [11] ->[55]
6 -> [27] ->[22]
7 -> [38] ->[28]

Final A matrix for linear transformation:
[[84, 119, 27, 96, 97, 31, 20, 95], 
[0, 70, 27, 27, 56, 40, 124, 13],
[0, 0, 43, 31, 3, 30, 1, 76], 
[0, 0, 0, 12, 117, 32, 98, 25], 
[0, 0, 0, 0, 112, 98, 31, 23], 
[0, 0, 0, 0, 0, 11, 83, 68], 
[0, 0, 0, 0, 0, 0, 27, 4], 
[0, 0, 0, 0, 0, 0, 0, 38]]

Final exponentiation matrix:
[23, 105, 43, 75, 87, 55, 22, 28]

The coded password reads:
msgjhgksjhilhofqjsjhikijmofkkrlh
Since, the password is 32 bits long, we divide it into two halves and try cryptanalysis for both the halves. We need to do the inverse of all EAEAE operations. We ran bruteforce over all possible values for a block to match our password.The decoded password is:
wjtqyboydb
Extra spaces were 0000 padded by ffs.
